package main

import "factory_method/src"

/*
	Реализовать паттерн «фабричный метод».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Factory_method_pattern
*/

/*
Паттерн "Фабричный метод" - это порождающий паттерн , который использует фабричные методы для решения проблемы
создания объектов без указания точного класса объекта, который будет создан.
*/

/*
Плюсы:
-делает систему легко расширяемой путем добавления объектов новых типов.
-Этот паттерн является основой для всех порождающих паттернов и может легко трансформироваться под нужды системы.
По этому, если перед разработчиком стоят не четкие требования для продукта или не ясен способ организации взаимодействия
между продуктами, то для начала можно воспользоваться паттерном Factory Method,
пока полностью не сформируются все требования.
- избавляет от привязке к конкретному типу
*/

/*
Минусы : -необходимость создавать наследника для каждого нового типа продукта.
-вызываемый метод может стать божественным классом.
-Может привести к созданию больших параллельных иерархий классов,
так как для каждого класса продукта надо создать свой подкласс создателя.
*/

/* Так как паттерн "фабричный матод" является родственным с паттерном "строитель", реализуем его по
знакому нам примеру создания заказов, где возвращаемый объект будет зависеть от города, в который мы заказываем товар.
*/

func main() {

	// инициализируем массив городов, для которых мы хотим создать объекты
	cities := []string{"Kazan", "Moscow", "Voronezh"}

	// в цикле создадим объекты, и выведем по ним информацию
	for _, val := range cities {
		order := src.GetCollector(val)
		if order == nil {
			continue
		}
		order.Print()
	}

}

package main

import (
	"state/src"
)

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern
*/

/*
Шаблон состояния — это поведенческий шаблон проектирования программного обеспечения, который позволяет объекту изменять
свое поведение при изменении его внутреннего состояния.
Шаблон состояния можно интерпретировать как шаблон стратегии, который может переключать стратегию посредством
вызова методов, определенных в интерфейсе шаблона. (структуры состояния меняют сам объект, а алгоритмы в "стретегии" нет)
*/

/*
Плюсы:
- Избавляет от множества условных операторов для установки состояния.
*/

/*
Минусы :
-Применение данного паттерна может быть затруднено, если состояния должны обмениваться данными, или одно состояние
настраивает свойства другого. В этом случае понадобится глобальный объект, что не очень хорошее архитектурное решение.
-Проблема реализации методов для нерелевантных состояний (например, удалить товар из пустой корзины).
*/

/*
Реализуем паттерн "состояние" на примере игры в рулетку. У нас есть объект Gamer и 4 возможных состояния:
старт игры, победа, проигрыш, ничья. И методы этих состояний - "Roll" и "Print".
*/
func main() {

	bob := src.NewGamer(10000) // создаем объект игрок с балансом 10000
	bob.PrintResult()          // выводим информацию об объекте
	// создаем возможные состояния объекта
	win := src.Win{Gamer: bob}
	lose := src.Loose{Gamer: bob}
	draw := src.Draw{Gamer: bob}

	bob.SetState(&win) // меняем состояние
	bob.Roll()         // делаем ставку
	bob.PrintResult()  // выводим информацию об объекте
	bob.SetState(&win)
	bob.Roll()
	bob.PrintResult()
	bob.SetState(&draw)
	bob.Roll()
	bob.PrintResult()
	bob.SetState(&lose)
	bob.Roll()
	bob.PrintResult()
	bob.SetState(&lose)
	bob.Roll()
	bob.PrintResult()

}

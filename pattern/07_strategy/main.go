package main

import "strategy/src"

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
Паттерн Strategy определяет набор алгоритмов схожих по роду деятельности, инкапсулирует их в отдельный класс
и делает их подменяемыми. Паттерн Strategy позволяет подменять алгоритмы без участия клиентов,
которые используют эти алгоритмы.
*/

/*
Плюсы:
-Отделение процедуры выбора алгоритма от его реализации. Это позволяет сделать выбор на основании контекста.
-Легко можно выбрать нужный алгоритм.
-Соблюдается принцип открытости/закрытости.
*/

/*
-Недостаток в том, что для использования стратегии необходимо изначально проектировать класс с возможностью
регистрации стратегий.
-Клиент должен знать, в чём состоит разница между стратегиями, чтобы выбрать подходящую.
*/

/*
Реализуем паттерн стратегия на примере выбора алгоритма доставки товара.
*/

// Сразу создадим необходимые данные: расстояние доставки и вес доставляемого товара.
// Так же сразу сделаем массив  наших алгоритмов, чтобы протестировать каждый.
var (
	distance      = 63
	productWeight = 15
	strategies    = []src.Strategy{
		&src.Courier{},
		&src.Taxi{},
		&src.Truck{},
	}
)

func main() {

	calc := src.Calculation{} // <- Инициализируем контекст выполнения того или иного алгоритма.

	// В цикле запускаем все наши алгоритмы.
	for _, val := range strategies {
		calc.SetCalculation(val)
		calc.Price(distance, productWeight)
	}
}
